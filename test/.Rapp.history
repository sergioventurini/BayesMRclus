# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_val <- input$beta_for_gamma#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
    gamma_val <- input$gamma_for_beta#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_val <- input$beta_for_gamma#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df_gamma <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df_gamma, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
    gamma_val <- input$gamma_for_beta#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df_beta <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df_beta, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val <- input$gamma_for_beta,#
      beta_val <- input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
    browser()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
p
n
input
as.numeric(input$resolution)
as.numeric(input)
as.numeric(unlist(input))
str(input)
post_vals
df
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
    browser()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
c
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    browser()#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    browser()#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = post_vals)#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
n
post_vals
str(post_vals)
class(post_vals)
str(df)
class(df)
str(df[, 2])
class(df[, 2])
Q
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_col4 <- function(inputId, label, min, max, value, step = NULL) {#
  column(4,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_col4("mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_col4("mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_col4("psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_col4("sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_col4("tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
  fluidRow(#
    column(6, sliderInput("beta_for_gamma", "Beta value", min = -20, max = 20, value = 0, step = 0.1)),#
    column(6, sliderInput("gamma_for_beta", "Gamma value", min = -20, max = 20, value = 0, step = 0.1))#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, "", min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Helper: slider in column width 4#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    div(class = "centered-slider",#
      tags$div(class = "centered-slider-label", withMathJax(label)),#
      sliderInput(inputId, label = NULL, min, max, value, step = step)#
    )#
  )#
}#
#
# UI#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      .centered-slider-label {#
        text-align: center;#
        margin-bottom: 5px;#
      }#
      .centered-slider .irs {#
        margin-left: auto !important;#
        margin-right: auto !important;#
        display: block;#
      }#
    "))#
  ),#
#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    div(class = "slider-wrapper",#
      tags$div(withMathJax(label)),#
      sliderInput(inputId, label = NULL, min, max, value, step = step)#
    )#
  )#
}#
#
# UI#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      .slider-wrapper {#
        text-align: center;#
      }#
      .slider-wrapper .irs {#
        margin-left: auto !important;#
        margin-right: auto !important;#
      }#
    "))#
  ),#
#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    div(style = "text-align: left;",#
      tags$div(withMathJax(label)),#
      sliderInput(inputId, label = NULL, min, max, value, step = step)#
    )#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    div(style = "text-align: left;",#
      tags$div(withMathJax(label)),#
      sliderInput(inputId, label = NULL, min, max, value, step = step)#
    )#
  )#
}#
#
# UI#
ui <- fluidPage(#
  tags$head(#
    tags$style(HTML("#
      .slider-wrapper {#
        text-align: left;#
      }#
      .slider-wrapper .irs {#
        margin-left: auto !important;#
        margin-right: auto !important;#
      }#
    "))#
  ),#
#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label)),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  tags$style(HTML("#
    .form-group {#
      text-align: left !important;#
    }#
    .form-group > label {#
      display: block;#
      text-align: left !important;#
    }#
  ")),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label), style = "text-align: left; margin-bottom: 5px;"),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  tags$style(HTML("#
    .form-group {#
      text-align: left !important;#
    }#
    .form-group > label {#
      display: block;#
      text-align: left !important;#
    }#
  ")),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0.0001, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0.0001, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.1),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.1)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label), style = "text-align: left; margin-bottom: 5px;"),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  tags$style(HTML("#
    .form-group {#
      text-align: left !important;#
    }#
    .form-group > label {#
      display: block;#
      text-align: left !important;#
    }#
  ")),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.01),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.01)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
# Functions#
bayesmr_prior <- function(gammaj = list(psi2 = 1), Gammaj = list(tau2 = 1),#
                          gamma = list(mean = 0, var = 1),#
                          beta = list(mean = 0, var = 1)){#
  prior <- list()#
  for (arg in names(formals(sys.function())))#
    prior[[arg]] <- get(arg)#
  prior#
}#
#
gamma_beta_post <- function(gamma, beta, data, prior, log = TRUE, verbose = TRUE) {#
  gammahat_j <- data[, 1]  # SNP-Exposure effect#
  Gammahat_j <- data[, 2]  # SNP-Outcome effect#
  sigma2_X <- data[, 3]^2  # SNP-Exposure effect variance#
  sigma2_Y <- data[, 4]^2  # SNP-Outcome effect variance#
#
  mu_gamma <- prior[["gamma"]][["mean"]]#
  sigma2_gamma <- prior[["gamma"]][["var"]]#
  mu_beta <- prior[["beta"]][["mean"]]#
  sigma2_beta <- prior[["beta"]][["var"]]#
  psi2 <- prior[["gammaj"]][["psi2"]]#
  tau2 <- prior[["Gammaj"]][["tau2"]]#
#
  psi2_j <- sigma2_X + psi2#
  tau2_j <- sigma2_Y + tau2#
#
  gamma_len <- length(gamma)#
  beta_len <- length(beta)#
  res <- matrix(NA, nrow = gamma_len, ncol = beta_len)#
#
  for (g in 1:gamma_len) {#
    p_gamma <- (gamma[g] - mu_gamma)^2/sigma2_gamma#
    p_gj <- (gammahat_j - gamma[g])^2/psi2_j#
    for (b in 1:beta_len) {#
      if (verbose)#
        message("Computing gamma/beta joint posterior for gamma = ", g, " and beta = ", b)#
#
      p_beta <- (beta[b] - mu_beta)^2/sigma2_beta#
      p_Gj <- (Gammahat_j - beta[b]*gamma[g])^2/(beta[b]^2*psi2 + tau2_j)#
      res[g, b] <- -0.5*(sum(p_gj) + sum(p_Gj) + p_gamma + p_beta)#
    }#
  }#
#
  if (!log)#
    res <- exp(res)#
#
  res#
}#
#
# Install packages#
if (!requireNamespace("devtools", quietly = TRUE)) {#
  install.packages("devtools")#
}#
if (!requireNamespace("ggplot2", quietly = TRUE)) {#
  install.packages("ggplot2")#
}#
if (!requireNamespace("shiny", quietly = TRUE)) {#
  install.packages("shiny")#
}#
if (!requireNamespace("mr.raps", quietly = TRUE)) {#
  devtools::install_github("qingyuanzhao/mr.raps")#
}#
library(ggplot2)#
library(shiny)#
library(mr.raps)#
#
# Prepare data#
data("bmi.sbp", package = "mr.raps")#
data <- data.frame(#
  beta_exposure = bmi.sbp[, "beta.exposure"],#
  beta_outcome = bmi.sbp[, "beta.outcome"],#
  se_exposure = bmi.sbp[, "se.exposure"],#
  se_outcome = bmi.sbp[, "se.outcome"]#
)#
#
# Slider with a specified column width#
slider_cols <- function(cols, inputId, label, min, max, value, step = NULL) {#
  column(cols,#
    tags$div(withMathJax(label), style = "text-align: left; margin-bottom: 5px;"),#
    sliderInput(inputId, NULL, min, max, value, step = step)#
  )#
}#
#
# UI#
ui <- fluidPage(#
  titlePanel("Interactive (Unnormalized) Joint Posterior"),#
#
  withMathJax(),#
#
  tags$style(HTML("#
    .form-group {#
      text-align: left !important;#
    }#
    .form-group > label {#
      display: block;#
      text-align: left !important;#
    }#
  ")),#
#
  fluidRow(column(12, tags$h4("Axis Ranges", style = "margin-top: 20px;"))),#
  fluidRow(#
    column(3, tags$div("$$\\gamma \\text{ min}$$"), textInput("gamma_min", NULL, value = "-0.05")),#
    column(3, tags$div("$$\\gamma \\text{ max}$$"), textInput("gamma_max", NULL, value = "0.05")),#
    column(3, tags$div("$$\\beta \\text{ min}$$"), textInput("beta_min", NULL, value = "-1")),#
    column(3, tags$div("$$\\beta \\text{ max}$$"), textInput("beta_max", NULL, value = "1"))#
  ),#
#
  fluidRow(column(12, tags$h4("Prior Parameters", style = "margin-top: 30px;"))),#
#
  fluidRow(#
    slider_cols(4, "mu_gamma", "$$\\mu_\\gamma$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "mu_beta", "$$\\mu_\\beta$$", -5, 5, 0, step = 0.1),#
    slider_cols(4, "psi2", "$$\\psi^2$$", 0, 10, 0.1, step = 0.01)#
  ),#
  fluidRow(#
    slider_cols(4, "sigma2_gamma", "$$\\sigma^2_\\gamma$$", 0, 10, 0.1, step = 0.01),#
    slider_cols(4, "sigma2_beta", "$$\\sigma^2_\\beta$$", 0, 10, 0.1, step = 0.01),#
    slider_cols(4, "tau2", "$$\\tau^2$$", 0, 10, 0.1, step = 0.01)#
  ),#
#
  fluidRow(#
    column(4, tags$h4("Plot Settings", style = "margin-top: 30px;")),#
    column(4, selectInput("resolution", "Grid Resolution",#
      choices = c("Low" = 50, "Medium" = 100, "High" = 150), selected = 50))#
  ),#
#
  fluidRow(column(12, plotOutput("joint_plot", height = "700px"))),#
#
  fluidRow(#
    slider_cols(6, "beta_for_gamma", "$$\\beta \\text{ value}$$", -20, 20, 0, step = 0.01),#
    slider_cols(6, "gamma_for_beta", "$$\\gamma \\text{ value}$$", -20, 20, 0, step = 0.01)#
  ),#
#
  fluidRow(#
    column(6, plotOutput("gamma_plot", height = "300px")),#
    column(6, plotOutput("beta_plot", height = "300px"))#
  )#
)#
#
# Server#
server <- function(input, output, session) {#
#
  plotParams <- reactive({#
    list(#
      mu_gamma     = input$mu_gamma,#
      mu_beta      = input$mu_beta,#
      sigma2_gamma = input$sigma2_gamma,#
      sigma2_beta  = input$sigma2_beta,#
      psi2         = input$psi2,#
      tau2         = input$tau2,#
      gamma_val    = input$gamma_for_beta,#
      beta_val     = input$beta_for_gamma#
    )#
  })#
#
  output$joint_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
    beta_min  <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max  <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
    beta_vals  <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
#
    df_plot <- expand.grid(gamma = gamma_vals, beta = beta_vals)#
    df_plot$posterior <- as.vector(post_vals)#
#
    ggplot(df_plot, aes(x = gamma, y = beta, z = posterior)) +#
      geom_contour_filled(bins = 20) +#
      scale_fill_viridis_d(option = "C") +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      geom_hline(yintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = expression(beta), fill = "Posterior") +#
      coord_cartesian(xlim = c(gamma_min, gamma_max), ylim = c(beta_min, beta_max)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$gamma_plot <- renderPlot({#
    gamma_min <- suppressWarnings(as.numeric(input$gamma_min))#
    gamma_max <- suppressWarnings(as.numeric(input$gamma_max))#
#
    if (is.na(gamma_min) || is.na(gamma_max) || gamma_min >= gamma_max) {#
      gamma_min <- -0.05; gamma_max <- 0.05#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    gamma_vals <- seq(gamma_min, gamma_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(gamma_vals, p$beta_val, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(gamma = gamma_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = gamma, y = posterior)) +#
      geom_line(color = "steelblue", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_gamma, linetype = "dashed", color = "gray") +#
      labs(x = expression(gamma), y = paste("Marginal Posterior at β =", p$beta_val)) +#
      theme_minimal(base_size = 14)#
  })#
#
  output$beta_plot <- renderPlot({#
    beta_min <- suppressWarnings(as.numeric(input$beta_min))#
    beta_max <- suppressWarnings(as.numeric(input$beta_max))#
#
    if (is.na(beta_min) || is.na(beta_max) || beta_min >= beta_max) {#
      beta_min <- -1; beta_max <- 1#
    }#
#
    p <- plotParams()#
#
    res <- as.numeric(input$resolution)#
    beta_vals <- seq(beta_min, beta_max, length.out = res)#
#
    prior <- bayesmr_prior(#
      gammaj = list(psi2 = p$psi2),#
      Gammaj = list(tau2 = p$tau2),#
      gamma  = list(mean = p$mu_gamma, var = p$sigma2_gamma),#
      beta   = list(mean = p$mu_beta, var = p$sigma2_beta)#
    )#
#
    post_vals <- gamma_beta_post(p$gamma_val, beta_vals, data, prior, log = FALSE, verbose = FALSE)#
    df <- data.frame(beta = beta_vals, posterior = as.numeric(post_vals))#
#
    ggplot(df, aes(x = beta, y = posterior)) +#
      geom_line(color = "darkorange", linewidth = 1.2) +#
      geom_vline(xintercept = p$mu_beta, linetype = "dashed", color = "gray") +#
      labs(x = expression(beta), y = paste("Marginal Posterior at γ =", p$gamma_val)) +#
      theme_minimal(base_size = 14)#
  })#
}#
#
# Run the app#
shinyApp(ui = ui, server = server)
